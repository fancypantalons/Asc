        goto main

################### standard library functions for pal13 ##################
#
# functions currently implemented are:
#
# read_s
# write_s
# mem_copy
# strcmp
#

########################## read family functions ##########################

#
# void read_s(string, size) 
#
# takes a pointer to a string and reads size characters into that string.
#

read_s

read_l
          push -3[1]
          consti 0
          eqi
          ifnz read_e                   # if no bytes left, done.

          push -4[1]
          dup
          readc                         # read character
          popi                          # put character in string.

          consti 1
          addi
          pop -4[1]                     # addy = addy + 1

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto read_l

read_e
          ret 1
                              
########################## write family functions #########################
                                        
#
# void write_s(string, size)
#
# takes a pointer to a string and prints size characters from
# that string.
#

write_s

write_l

          push -3[1]
          consti 0
          eqi
          ifnz write_e                  # if there are no bytes left, done.

          push -4[1]                    # push the string address on.
          dup
          pushi                         # push a character from the string.
          writec                        # write the character out.

          consti 1
          addi
          pop -4[1]                     # increase string pointer

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto write_l

write_e

          ret 1

############################## misc functions #############################
          
#
# void mem_copy(dest, source, size)
#
# copies size bytes from dest to source.  dest and source must
# be passed as pointers.
#
# locals:
#   int count

mem_copy
          push -4[1]
          push -5[1]

mem_loop

          push -3[1]                    # stick size on stack
          consti 0                      # and zero
          eqi                           # size == 0?
          ifnz mem_done                 # we're done...

          push 1[1]                     # push target address on stack
          dup

          push 0[1]                     # push source address on stack
          pushi                         # get byte
          popi                          # store byte
          
          consti 1                      # stick 1 on stack
          addi                          # increment target address
          pop 1[1]                      # store new target address

          push 0[1]                     # push source addy
          consti 1
          addi                          # increment source addy by 1
          pop 0[1]

          push -3[1]                    # push size on stack
          consti 1
          subi                          # decrement size by one
          pop -3[1]

          goto mem_loop

mem_done
          adjust -2
          ret 1

#
# void mem_cplr(source, dest, size)
#
# copies size bytes from dest to source.  dest and source must
# be passed as pointers.
#
# locals:
#   int count

mem_cplr
          push -5[1]
          push -4[1]

mem_lplr
          push -3[1]                    # stick size on stack
          consti 0                      # and zero
          eqi                           # size == 0?
          ifnz mem_done                 # we're done...

          push 1[1]                     # push target address on stack
          dup

          push 0[1]                     # push source address on stack
          pushi                         # get byte
          popi                          # store byte
          
          consti 1                      # stick 1 on stack
          addi                          # increment target address
          pop 1[1]                      # store new target address

          push 0[1]                     # push source addy
          consti 1
          addi                          # increment source addy by 1
          pop 0[1]

          push -3[1]                    # push size on stack
          consti 1
          subi                          # decrement size by one
          pop -3[1]

          goto mem_loop

mem_dnlr

          adjust -2
          ret 1

#
# int strcmp(string1, string2, size)
#
# compares two strings of the same size.  returns 0 if they are the
# same, < 0 if string1 < string2, and > 0 if string1 > string2.         
# 

strcmp
          
strcmp_l
          push -3[1]
          consti 0
          eqi
          ifnz str_eq                   # are we at the end of the strings? must be equal.

          push -5[1]
          pushi                         # shove char1 on stack
          
          push -4[1]                    
          pushi                         # and char2 on stack

          subi                          # get the difference
          dup                           # need the copy for comparison.
          pop -6[1]                     # might as well set the ret value now.
          consti 0
          eqi                           # is the difference == 0?
          ifz strcmp_e                  # if not, return the difference
          
          push -5[1]
          consti 1
          addi
          pop -5[1]                     # string1 += 1

          push -4[1]
          consti 1
          addi
          pop -4[1]                     # string2 += 1

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto strcmp_l
          
str_eq
          consti 0
          pop -6[1]                     # return zero.

strcmp_e
          ret 1

run_err
	alloc	25
	dup
	dup
	consti	82
	popi
	consti 1
	addi
	dup
	consti	117
	popi
	consti 1
	addi
	dup
	consti	110
	popi
	consti 1
	addi
	dup
	consti	45
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	105
	popi
	consti 1
	addi
	dup
	consti	109
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	69
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	111
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	79
	popi
	consti 1
	addi
	dup
	consti	99
	popi
	consti 1
	addi
	dup
	consti	99
	popi
	consti 1
	addi
	dup
	consti	117
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	100
	popi
	consti 1
	addi
	dup
	consti	33
	popi
	consti 1
	addi
	dup
	consti 10
	popi
	consti 1
	addi
	dup
	adjust -2
	consti	24
	call 1, write_s
	adjust -2
        stop
main	
	#var img
	adjust 1
	#var light
	adjust 3
	#var center
	adjust 3
	#var planenorm
	adjust 3
	#var view
	adjust 3
	goto realmain
l0	
	goto reall0
reall0	
	push	-3[1]
	consti	0
	itor
	ltr
	#if expr
	ifz l1
	pusha	-4[1]
	push	-3[1]
	dup
	adjust -2
	constr 0
	adjust 1
	subr
	popi
	#then matched_stat
	goto l2
l1	
	pusha	-4[1]
	push	-3[1]
	popi
	#else stat
l2	
	ret 1
l3	
	#var nextguess
	adjust 1
	#var guess
	adjust 1
	#var e
	adjust 1
	goto reall3
reall3	
	#e
	pusha	2[1]
	constr	1e-09
	popi
	#guess
	pusha	1[1]
	consti	0
	itor
	popi
	#nextguess
	pusha	0[1]
	push	-3[1]
	consti	2
	itor
	divr
	popi
	#while start
l4	
	adjust 1
	push	0[1]
	push	1[1]
	subr
	call	1, l0
	adjust -1
	push	2[1]
	gtr
	#while stat
	ifz l5
	#do stat
	#guess
	pusha	1[1]
	push	0[1]
	popi
	#nextguess
	pusha	0[1]
	push	1[1]
	push	-3[1]
	push	1[1]
	divr
	addr
	consti	2
	itor
	divr
	popi
	goto l4
l5	
	pusha	-4[1]
	push	0[1]
	popi
	adjust -3
	ret 1
l6	
	#var result
	adjust 1
	#var i
	adjust 1
	goto reall6
reall6	
	#i
	pusha	1[1]
	push	-4[1]
	popi
	#result
	pusha	0[1]
	consti	1
	itor
	popi
	#while start
l7	
	push	1[1]
	consti	0
	gti
	#while stat
	ifz l8
	#do stat
	#result
	pusha	0[1]
	push	0[1]
	push	-3[1]
	mulr
	popi
	#i
	pusha	1[1]
	push	1[1]
	consti	1
	subi
	popi
	goto l7
l8	
	pusha	-5[1]
	push	0[1]
	popi
	adjust -2
	ret 1
l9	
	#var result
	adjust 3
	goto reall9
reall9	
	pusha	0[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-4[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	subr
	popi
	pusha	0[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-4[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	subr
	popi
	pusha	0[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-4[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	subr
	popi
	push	-5[1]
	pusha	0[1]
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	adjust -3
	ret 1
l10	
	#var result
	adjust 3
	goto reall10
reall10	
	pusha	0[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-4[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	addr
	popi
	pusha	0[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-4[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	addr
	popi
	pusha	0[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-4[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	addr
	popi
	push	-5[1]
	pusha	0[1]
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	adjust -3
	ret 1
l11	
	goto reall11
reall11	
	pusha	-5[1]
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-4[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	mulr
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-4[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	mulr
	addr
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-4[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	mulr
	addr
	popi
	ret 1
l12	
	#var result
	adjust 3
	goto reall12
reall12	
	pusha	0[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-4[1]
	mulr
	popi
	pusha	0[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-4[1]
	mulr
	popi
	pusha	0[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-4[1]
	mulr
	popi
	push	-5[1]
	pusha	0[1]
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	adjust -3
	ret 1
l13	
	goto reall13
reall13	
	pusha	-4[1]
	adjust 1
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	mulr
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	mulr
	addr
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	mulr
	addr
	call	1, l3
	adjust -1
	popi
	ret 1
l14	
	#var len
	adjust 1
	goto reall14
reall14	
	#len
	pusha	0[1]
	adjust 1
	push	-3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l13
	free
	popi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	0[1]
	divr
	popi
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	push	-3[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	0[1]
	divr
	popi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	0[1]
	divr
	popi
	adjust -1
	ret 1
l15	
	#var y
	adjust 1
	#var x
	adjust 1
	goto reall15
reall15	
	#x
	pusha	1[1]
	consti	1
	popi
	#while start
l16	
	push	1[1]
	consti	175
	gti
	not
	#while stat
	ifz l17
	#do stat
	#y
	pusha	0[1]
	consti	1
	popi
	#while start
l18	
	push	0[1]
	consti	175
	gti
	not
	#while stat
	ifz l19
	#do stat
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	175
	muli
	addi
	push	0[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	consti	0
	popi
	#y
	pusha	0[1]
	push	0[1]
	consti	1
	addi
	popi
	goto l18
l19	
	#x
	pusha	1[1]
	push	1[1]
	consti	1
	addi
	popi
	goto l16
l17	
	adjust -2
	ret 1
l20	
	goto reall20
reall20	
	consti	0
	writec
	consti	0
	writec
	consti	2
	writec
	alloc	5
	dup
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	consti	5
	call 1, write_s
	adjust -2
	adjust -1
	consti	0
	writec
	consti	0
	writec
	consti	0
	writec
	consti	0
	writec
	consti	175
	writec
	consti	0
	writec
	consti	175
	writec
	consti	0
	writec
	consti	24
	writec
	consti	0
	writec
	ret 1
l21	
	#var y
	adjust 1
	#var x
	adjust 1
	goto reall21
reall21	
	#y
	pusha	0[1]
	consti	175
	popi
	call	1, l20
	#while start
l22	
	push	0[1]
	consti	0
	gti
	#while stat
	ifz l23
	#do stat
	#x
	pusha	1[1]
	consti	175
	popi
	#while start
l24	
	push	1[1]
	consti	0
	gti
	#while stat
	ifz l25
	#do stat
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	175
	muli
	addi
	push	0[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	pushi
	writec
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	175
	muli
	addi
	push	0[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	pushi
	writec
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	175
	muli
	addi
	push	0[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	pushi
	writec
	#x
	pusha	1[1]
	push	1[1]
	consti	1
	subi
	popi
	goto l24
l25	
	#y
	pusha	0[1]
	push	0[1]
	consti	1
	subi
	popi
	goto l22
l23	
	adjust -2
	ret 1
l26	
	#var t2
	adjust 1
	#var t1
	adjust 1
	goto reall26
l27	
	#var a
	adjust 1
	#var b
	adjust 1
	#var c
	adjust 1
	#var d
	adjust 1
	#var e
	adjust 1
	#var t2
	adjust 1
	#var t1
	adjust 1
	goto reall27
reall27	
	#t1
	pusha	6[2]
	consti	0
	itor
	popi
	#t2
	pusha	5[2]
	consti	0
	itor
	popi
	#a
	pusha	0[2]
	consti	2
	push	-3[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	pusha	4[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	subr
	adjust	-1
	itor
	adjust	1
	mulr
	push	-4[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	mulr
	consti	2
	push	-3[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	pusha	4[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	subr
	adjust	-1
	itor
	adjust	1
	mulr
	push	-4[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	mulr
	addr
	consti	2
	push	-3[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	pusha	4[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	subr
	adjust	-1
	itor
	adjust	1
	mulr
	push	-4[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	mulr
	addr
	popi
	#b
	pusha	1[2]
	push	-4[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-4[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	mulr
	push	-4[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-4[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	mulr
	addr
	push	-4[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-4[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	mulr
	addr
	popi
	#c
	pusha	2[2]
	push	-3[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	pusha	4[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	subr
	push	-3[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	pusha	4[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	subr
	mulr
	push	-3[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	pusha	4[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	subr
	push	-3[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	pusha	4[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	subr
	mulr
	addr
	push	-3[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	pusha	4[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	subr
	push	-3[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	pusha	4[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	subr
	mulr
	addr
	popi
	#d
	pusha	3[2]
	push	2[2]
	constr	1
	constr	1
	mulr
	subr
	popi
	#e
	pusha	4[2]
	push	0[2]
	push	0[2]
	mulr
	consti	4
	push	1[2]
	adjust	-1
	itor
	adjust	1
	mulr
	push	3[2]
	mulr
	subr
	popi
	push	4[2]
	consti	0
	itor
	ltr
	#if expr
	ifz l28
	pusha	-5[2]
	consti	1
	dup
	adjust -2
	consti 0
	adjust 1
	subi
	itor
	popi
	#then matched_stat
	goto l29
l28	
	#t1
	pusha	6[2]
	push	0[2]
	dup
	adjust -2
	constr 0
	adjust 1
	subr
	adjust 1
	push	4[2]
	call	1, l3
	adjust -1
	consti	2
	push	1[2]
	adjust	-1
	itor
	adjust	1
	mulr
	divr
	addr
	popi
	#t2
	pusha	5[2]
	push	0[2]
	dup
	adjust -2
	constr 0
	adjust 1
	subr
	adjust 1
	push	4[2]
	call	1, l3
	adjust -1
	consti	2
	push	1[2]
	adjust	-1
	itor
	adjust	1
	mulr
	divr
	subr
	popi
	push	6[2]
	push	5[2]
	ltr
	#if expr
	ifz l30
	pusha	-5[2]
	push	6[2]
	popi
	#then matched_stat
	goto l31
l30	
	pusha	-5[2]
	push	5[2]
	popi
	#else stat
l31	
	#else stat
l29	
	adjust -7
	ret 2
l32	
	#var a
	adjust 1
	#var b
	adjust 1
	#var t
	adjust 1
	goto reall32
reall32	
	#a
	pusha	0[2]
	pusha	7[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-3[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	mulr
	pusha	7[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-3[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	mulr
	addr
	pusha	7[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-3[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	mulr
	addr
	popi
	#b
	pusha	1[2]
	pusha	7[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	push	-4[2]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	mulr
	pusha	7[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	push	-4[2]
	push	1[0]
	adjust	-1
	consti	1
	addi
	pushi
	mulr
	addr
	pusha	7[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	push	-4[2]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	mulr
	addr
	popi
	#t
	pusha	2[2]
	push	0[2]
	constr	-5
	addr
	push	1[2]
	divr
	dup
	adjust -2
	constr 0
	adjust 1
	subr
	popi
	push	2[2]
	consti	2147483646
	itor
	gtr
	#if expr
	ifz l33
	#t
	pusha	2[2]
	consti	2147483646
	itor
	popi
	# if_part then stat
l33	
	pusha	-5[2]
	push	2[2]
	popi
	adjust -3
	ret 2
reall26	
	#t1
	pusha	1[1]
	adjust 1
	push	-4[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	push	-3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	2, l27
	free
	free
	popi
	#t2
	pusha	0[1]
	adjust 1
	push	-4[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	push	-3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	2, l32
	free
	free
	popi
	push	1[1]
	consti	0
	itor
	ltr
	push	0[1]
	consti	0
	itor
	ltr
	and
	#if expr
	ifz l35
	pusha	-6[1]
	consti	2
	popi
	#then matched_stat
	goto l36
l35	
	push	1[1]
	consti	0
	itor
	ltr
	push	0[1]
	consti	0
	itor
	ltr
	not
	and
	#if expr
	ifz l37
	pusha	-5[1]
	push	0[1]
	popi
	pusha	-6[1]
	consti	1
	popi
	#then matched_stat
	goto l38
l37	
	push	0[1]
	consti	0
	itor
	ltr
	push	1[1]
	consti	0
	itor
	ltr
	not
	and
	#if expr
	ifz l39
	pusha	-5[1]
	push	1[1]
	popi
	pusha	-6[1]
	consti	0
	popi
	#then matched_stat
	goto l40
l39	
	push	1[1]
	push	0[1]
	ltr
	#if expr
	ifz l41
	pusha	-5[1]
	push	1[1]
	popi
	pusha	-6[1]
	consti	0
	popi
	#then matched_stat
	goto l42
l41	
	pusha	-5[1]
	push	0[1]
	popi
	pusha	-6[1]
	consti	1
	popi
	#else stat
l42	
	#else stat
l40	
	#else stat
l38	
	#else stat
l36	
	adjust -2
	ret 1
l43	
	#var z
	adjust 1
	#var x
	adjust 1
	#var black
	adjust 1
	goto reall43
reall43	
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	consti	4
	itor
	divr
	popi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	consti	2
	itor
	divr
	popi
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	consti	0
	itor
	ltr
	#if expr
	ifz l44
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	adjust 1
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	consti	10
	itor
	addr
	call	1, l0
	adjust -1
	popi
	# if_part then stat
l44	
	#x
	pusha	1[1]
	push	-3[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	rtoi
	popi
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	consti	0
	itor
	ltr
	#if expr
	ifz l46
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	adjust 1
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	consti	10
	itor
	addr
	call	1, l0
	adjust -1
	popi
	# if_part then stat
l46	
	#z
	pusha	0[1]
	push	-3[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	pushi
	rtoi
	popi
	#black
	pusha	2[1]
	push	1[1]
	consti	2
	mod
	consti	0
	eqi
	push	0[1]
	consti	2
	mod
	consti	0
	eqi
	or
	push	1[1]
	consti	2
	mod
	consti	0
	eqi
	not
	push	0[1]
	consti	2
	mod
	consti	0
	eqi
	not
	or
	and
	popi
	push	2[1]
	#if expr
	ifz l48
	pusha	-4[1]
	consti	768
	consti	2
	adjust	-1
	itor
	adjust	1
	itor
	divr
	popi
	#then matched_stat
	goto l49
l48	
	pusha	-4[1]
	consti	768
	itor
	popi
	#else stat
l49	
	adjust -3
	ret 1
l50	
	#var dirout
	adjust 3
	#var p
	adjust 3
	#var v
	adjust 3
	#var l
	adjust 3
	#var n
	adjust 3
	#var i
	adjust 3
	#var intensity
	adjust 1
	#var t
	adjust 1
	#var obj
	adjust 1
	#var refintensity
	adjust 1
	goto reall50
reall50	
	#obj
	pusha	20[1]
	adjust 1
	push	19[1]
	push	-4[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	push	-3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l26
	free
	free
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#t
	pusha	19[1]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	popi
	push	20[1]
	consti	0
	eqi
	#if expr
	ifz l51
	#p
	pusha	3[1]
	alloc 3
	push	19[1]
	push	-4[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l12
	free
	adjust -1
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	#n
	pusha	12[1]
	alloc 3
	pusha	4[0]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l9
	free
	free
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	pusha	12[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#n
	pusha	12[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	#l
	pusha	9[1]
	alloc 3
	pusha	3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	1[0]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l9
	free
	free
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	pusha	9[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#l
	pusha	9[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	#v
	pusha	6[1]
	alloc 3
	pusha	3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	push	-3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l9
	free
	free
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	pusha	6[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#v
	pusha	6[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	#i
	pusha	15[1]
	alloc 3
	alloc 3
	consti	2
	adjust 1
	pusha	12[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	9[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l11
	free
	free
	adjust	-1
	itor
	adjust	1
	mulr
	pusha	9[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l12
	free
	adjust -1
	pusha	9[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l9
	free
	free
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	pusha	15[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#i
	pusha	15[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	#intensity
	pusha	18[1]
	consti	192
	adjust 1
	consti	96
	adjust 1
	pusha	15[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	6[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l11
	free
	free
	call	1, l6
	adjust -1
	adjust -1
	adjust	-1
	itor
	adjust	1
	mulr
	popi
	#dirout
	pusha	0[1]
	alloc 3
	alloc 3
	consti	2
	adjust 1
	pusha	12[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	6[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l11
	free
	free
	adjust	-1
	itor
	adjust	1
	mulr
	pusha	12[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l12
	free
	adjust -1
	pusha	6[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l9
	free
	free
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	pusha	0[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#dirout
	pusha	0[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	#refintensity
	pusha	21[1]
	adjust 1
	pusha	0[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l50
	free
	free
	itor
	popi
	#intensity
	pusha	18[1]
	push	18[1]
	constr	0.95
	mulr
	push	21[1]
	consti	1
	constr	0.95
	adjust	-1
	itor
	adjust	1
	subr
	mulr
	addr
	adjust 1
	pusha	12[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	9[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l11
	free
	free
	consti	96
	itor
	mulr
	subr
	popi
	push	18[1]
	consti	0
	itor
	ltr
	#if expr
	ifz l53
	#intensity
	pusha	18[1]
	consti	0
	itor
	popi
	# if_part then stat
l53	
	push	18[1]
	consti	255
	itor
	gtr
	#if expr
	ifz l55
	#intensity
	pusha	18[1]
	consti	255
	itor
	popi
	# if_part then stat
l55	
	pusha	-5[1]
	push	18[1]
	rtoi
	popi
	#then matched_stat
	goto l52
l51	
	push	20[1]
	consti	1
	eqi
	#if expr
	ifz l57
	#p
	pusha	3[1]
	alloc 3
	push	19[1]
	push	-4[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l12
	free
	adjust -1
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	#n
	pusha	12[1]
	pusha	7[0]
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	pusha	12[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#n
	pusha	12[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	#l
	pusha	9[1]
	alloc 3
	pusha	3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	1[0]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l9
	free
	free
	#memcopy
	consti 3
	call 1, mem_copy
	adjust -1
	free
	adjust -1
	pusha	9[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#l
	pusha	9[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	#intensity
	pusha	18[1]
	adjust 1
	pusha	9[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	12[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l11
	free
	free
	adjust 1
	pusha	3[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l43
	free
	mulr
	dup
	adjust -2
	constr 0
	adjust 1
	subr
	popi
	push	18[1]
	constr	0
	ltr
	#if expr
	ifz l59
	#intensity
	pusha	18[1]
	constr	0
	popi
	# if_part then stat
l59	
	pusha	-5[1]
	push	18[1]
	rtoi
	popi
	#then matched_stat
	goto l58
l57	
	pusha	-5[1]
	consti	0
	popi
	#else stat
l58	
	#else stat
l52	
	adjust -22
	ret 1
l61	
	#var y
	adjust 1
	#var x
	adjust 1
	#var ph
	adjust 1
	#var pw
	adjust 1
	#var pey
	adjust 1
	#var pex
	adjust 1
	#var psy
	adjust 1
	#var psx
	adjust 1
	#var dir
	adjust 3
	goto reall61
reall61	
	#y
	pusha	0[1]
	consti	1
	itor
	popi
	#ph
	pusha	2[1]
	consti	2
	push	0[1]
	adjust	-1
	itor
	adjust	1
	mulr
	popi
	#x
	pusha	1[1]
	push	0[1]
	consti	175
	consti	175
	adjust	-1
	itor
	adjust	1
	itor
	divr
	divr
	popi
	#pw
	pusha	3[1]
	consti	2
	push	1[1]
	adjust	-1
	itor
	adjust	1
	mulr
	popi
	#psx
	pusha	7[1]
	push	1[1]
	dup
	adjust -2
	constr 0
	adjust 1
	subr
	popi
	#psy
	pusha	6[1]
	push	0[1]
	dup
	adjust -2
	constr 0
	adjust 1
	subr
	popi
	#pex
	pusha	5[1]
	push	1[1]
	popi
	#pey
	pusha	4[1]
	push	0[1]
	popi
	#y
	pusha	0[1]
	consti	1
	itor
	popi
	#while start
l62	
	push	0[1]
	consti	175
	itor
	gtr
	not
	#while stat
	ifz l63
	#do stat
	#x
	pusha	1[1]
	consti	1
	itor
	popi
	#while start
l64	
	push	1[1]
	consti	175
	itor
	gtr
	not
	#while stat
	ifz l65
	#do stat
	pusha	8[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	push	7[1]
	push	3[1]
	push	1[1]
	consti	1
	itor
	subr
	consti	175
	itor
	divr
	mulr
	addr
	popi
	pusha	8[1]
	push	1[0]
	adjust	-1
	consti	1
	addi
	push	6[1]
	push	2[1]
	push	0[1]
	consti	1
	itor
	subr
	consti	175
	itor
	divr
	mulr
	addr
	popi
	pusha	8[1]
	push	2[0]
	adjust	-1
	consti	2
	addi
	consti	1
	itor
	popi
	pusha	8[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l14
	dup
	#dir
	pusha	8[1]
	consti 3
	call 1, mem_cplr
	adjust -3
	free
	push	-3[1]
	push	1[1]
	rtoi
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	175
	muli
	addi
	push	0[1]
	rtoi
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	175
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	adjust 1
	pusha	8[1]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	pusha	10[0]
	dup
	dup
	adjust -3
	alloc 3
	dup
	adjust 1
	consti 3
	call 1, mem_copy
	adjust -3
	call	1, l50
	free
	free
	popi
	#x
	pusha	1[1]
	push	1[1]
	consti	1
	itor
	addr
	popi
	goto l64
l65	
	#y
	pusha	0[1]
	push	0[1]
	consti	1
	itor
	addr
	popi
	goto l62
l63	
	adjust -11
	ret 1
realmain	
	pusha	10[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	consti	0
	itor
	popi
	pusha	10[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	consti	0
	itor
	popi
	pusha	10[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	consti	0
	itor
	popi
	pusha	1[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	constr	1.5
	popi
	pusha	1[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	constr	2
	popi
	pusha	1[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	constr	-7
	popi
	pusha	4[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	constr	0
	popi
	pusha	4[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	constr	0
	popi
	pusha	4[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	constr	2
	popi
	pusha	7[0]
	push	0[0]
	adjust	-1
	consti	0
	addi
	constr	0
	popi
	pusha	7[0]
	push	1[0]
	adjust	-1
	consti	1
	addi
	constr	1
	popi
	pusha	7[0]
	push	2[0]
	adjust	-1
	consti	2
	addi
	constr	0
	popi
	alloc	30625
	pop	0[0]
	push	0[0]
	call	1, l15
	adjust -1
	push	0[0]
	call	1, l61
	adjust -1
	push	0[0]
	call	1, l21
	adjust -1
	stop
