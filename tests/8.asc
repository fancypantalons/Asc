        goto main

################### standard library functions for pal13 ##################
#
# functions currently implemented are:
#
# read_s
# write_s
# mem_copy
# strcmp
#

########################## read family functions ##########################

#
# void read_s(string, size) 
#
# takes a pointer to a string and reads size characters into that string.
#

read_s

read_l
          push -3[1]
          consti 0
          eqi
          ifnz read_e                   # if no bytes left, done.

          push -4[1]
          dup
          readc                         # read character
          popi                          # put character in string.

          consti 1
          addi
          pop -4[1]                     # addy = addy + 1

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto read_l

read_e
          ret 1
                              
########################## write family functions #########################
                                        
#
# void write_s(string, size)
#
# takes a pointer to a string and prints size characters from
# that string.
#

write_s

write_l

          push -3[1]
          consti 0
          eqi
          ifnz write_e                  # if there are no bytes left, done.

          push -4[1]                    # push the string address on.
          dup
          pushi                         # push a character from the string.
          writec                        # write the character out.

          consti 1
          addi
          pop -4[1]                     # increase string pointer

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto write_l

write_e

          ret 1

############################## misc functions #############################
          
#
# void mem_copy(dest, source, size)
#
# copies size bytes from dest to source.  dest and source must
# be passed as pointers.
#
# locals:
#   int count

mem_copy
          push -4[1]
          push -5[1]

mem_loop

          push -3[1]                    # stick size on stack
          consti 0                      # and zero
          eqi                           # size == 0?
          ifnz mem_done                 # we're done...

          push 1[1]                     # push target address on stack
          dup

          push 0[1]                     # push source address on stack
          pushi                         # get byte
          popi                          # store byte
          
          consti 1                      # stick 1 on stack
          addi                          # increment target address
          pop 1[1]                      # store new target address

          push 0[1]                     # push source addy
          consti 1
          addi                          # increment source addy by 1
          pop 0[1]

          push -3[1]                    # push size on stack
          consti 1
          subi                          # decrement size by one
          pop -3[1]

          goto mem_loop

mem_done
          adjust -2
          ret 1

#
# void mem_cplr(source, dest, size)
#
# copies size bytes from dest to source.  dest and source must
# be passed as pointers.
#
# locals:
#   int count

mem_cplr
          push -5[1]
          push -4[1]

mem_lplr
          push -3[1]                    # stick size on stack
          consti 0                      # and zero
          eqi                           # size == 0?
          ifnz mem_done                 # we're done...

          push 1[1]                     # push target address on stack
          dup

          push 0[1]                     # push source address on stack
          pushi                         # get byte
          popi                          # store byte
          
          consti 1                      # stick 1 on stack
          addi                          # increment target address
          pop 1[1]                      # store new target address

          push 0[1]                     # push source addy
          consti 1
          addi                          # increment source addy by 1
          pop 0[1]

          push -3[1]                    # push size on stack
          consti 1
          subi                          # decrement size by one
          pop -3[1]

          goto mem_loop

mem_dnlr

          adjust -2
          ret 1

#
# int strcmp(string1, string2, size)
#
# compares two strings of the same size.  returns 0 if they are the
# same, < 0 if string1 < string2, and > 0 if string1 > string2.         
# 

strcmp
          
strcmp_l
          push -3[1]
          consti 0
          eqi
          ifnz str_eq                   # are we at the end of the strings? must be equal.

          push -5[1]
          pushi                         # shove char1 on stack
          
          push -4[1]                    
          pushi                         # and char2 on stack

          subi                          # get the difference
          dup                           # need the copy for comparison.
          pop -6[1]                     # might as well set the ret value now.
          consti 0
          eqi                           # is the difference == 0?
          ifz strcmp_e                  # if not, return the difference
          
          push -5[1]
          consti 1
          addi
          pop -5[1]                     # string1 += 1

          push -4[1]
          consti 1
          addi
          pop -4[1]                     # string2 += 1

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto strcmp_l
          
str_eq
          consti 0
          pop -6[1]                     # return zero.

strcmp_e
          ret 1

run_err
	alloc	25
	dup
	dup
	consti	82
	popi
	consti 1
	addi
	dup
	consti	117
	popi
	consti 1
	addi
	dup
	consti	110
	popi
	consti 1
	addi
	dup
	consti	45
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	105
	popi
	consti 1
	addi
	dup
	consti	109
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	69
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	111
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	79
	popi
	consti 1
	addi
	dup
	consti	99
	popi
	consti 1
	addi
	dup
	consti	99
	popi
	consti 1
	addi
	dup
	consti	117
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	100
	popi
	consti 1
	addi
	dup
	consti	33
	popi
	consti 1
	addi
	dup
	consti 10
	popi
	consti 1
	addi
	dup
	adjust -2
	consti	24
	call 1, write_s
	adjust -2
        stop
main	
	#var root
	adjust 1
	goto realmain
l0	
	#var newnode
	adjust 1
	goto reall0
reall0	
	alloc	8
	pop	0[1]
	push	0[1]
	pusha	1[0]
	adjust	-1
	consti	1
	addi
	pusha	0[0]
	adjust	-1
	consti	0
	addi
	push	-4[1]
	#memcopy
	consti 6
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	push	0[1]
	pusha	1[0]
	adjust	-1
	consti	1
	addi
	push	6[0]
	adjust	-1
	consti	6
	addi
	push	-5[1]
	popi
	push	0[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	push	-3[1]
	popi
	pusha	-3[1]
	push	0[1]
	popi
	adjust -1
	ret 1
l1	
	#var curr
	adjust 1
	goto reall1
l2	
	goto reall2
reall2	
	consti	10
	push	-3[2]
	push	6[0]
	adjust	-1
	consti	6
	addi
	pushi
	consti	58
	push	-3[2]
	pusha	0[0]
	adjust	-1
	consti	0
	addi
	dup
	consti	6
	call 1, write_s
	adjust -2
	adjust -1
	writec
	writei
	writec
	ret 2
reall1	
	#curr
	pusha	0[1]
	push	-3[1]
	popi
	#while start
l3	
	push	0[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	consti	0
	eqi
	not
	#while stat
	ifz l4
	#do stat
	push	0[1]
	pusha	1[0]
	adjust	-1
	consti	1
	addi
	dup
	dup
	adjust -3
	alloc 7
	dup
	adjust 1
	consti 7
	call 1, mem_copy
	adjust -3
	call	2, l2
	free
	#curr
	pusha	0[1]
	push	0[1]
	push	0[0]
	adjust	-1
	consti	0
	addi
	pushi
	popi
	goto l3
l4	
	push	0[1]
	pusha	1[0]
	adjust	-1
	consti	1
	addi
	dup
	dup
	adjust -3
	alloc 7
	dup
	adjust 1
	consti 7
	call 1, mem_copy
	adjust -3
	call	2, l2
	free
	adjust -1
	ret 1
l5	
	#var thisnode
	adjust 1
	goto reall5
l6	
	goto reall6
l7	
	#var thisnode
	adjust 1
	goto reall7
l8	
	goto reall8
l9	
	#var thisnode
	adjust 1
	goto reall9
l10	
	goto reall10
l11	
	#var thisnode
	adjust 1
	goto reall11
l12	
	goto reall12
l13	
	#var thisnode
	adjust 1
	goto reall13
l14	
	goto reall14
l15	
	#var thisnode
	adjust 1
	goto reall15
l16	
	goto reall16
l17	
	#var thisnode
	adjust 1
	goto reall17
l18	
	goto reall18
l19	
	#var thisnode
	adjust 1
	goto reall19
reall19	
	alloc	8
	pop	0[15]
	push	0[15]
	push	0[0]
	adjust	-1
	consti	0
	addi
	consti	0
	popi
	push	0[15]
	pusha	1[0]
	adjust	-1
	consti	1
	addi
	pusha	0[0]
	adjust	-1
	consti	0
	addi
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	consti	53
	popi
	consti 1
	addi
	dup
	adjust -2
	#memcopy
	consti 6
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	push	0[15]
	pusha	1[0]
	adjust	-1
	consti	1
	addi
	push	6[0]
	adjust	-1
	consti	6
	addi
	consti	15
	popi
	pusha	-3[15]
	push	0[15]
	popi
	adjust -1
	ret 15
reall18	
	pusha	-3[14]
	adjust 1
	call	15, l19
	popi
	consti	14
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	consti	52
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	-3[14]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	pusha	-3[14]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	ret 14
reall17	
	push	0[13]
	call	14, l18
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[13]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	consti	13
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	consti	51
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	0[13]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[13]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	pusha	-3[13]
	push	0[13]
	popi
	adjust -1
	ret 13
reall16	
	pusha	-3[12]
	adjust 1
	call	13, l17
	popi
	consti	12
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	consti	50
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	-3[12]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	pusha	-3[12]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	ret 12
reall15	
	push	0[11]
	call	12, l16
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[11]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	consti	11
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	0[11]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[11]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	pusha	-3[11]
	push	0[11]
	popi
	adjust -1
	ret 11
reall14	
	pusha	-3[10]
	adjust 1
	call	11, l15
	popi
	consti	10
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	-3[10]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	pusha	-3[10]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	ret 10
reall13	
	push	0[9]
	call	10, l14
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[9]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	consti	9
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	57
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	0[9]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[9]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	pusha	-3[9]
	push	0[9]
	popi
	adjust -1
	ret 9
reall12	
	pusha	-3[8]
	adjust 1
	call	9, l13
	popi
	consti	8
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	56
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	-3[8]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	pusha	-3[8]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	ret 8
reall11	
	push	0[7]
	call	8, l12
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[7]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	consti	7
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	55
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	0[7]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[7]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	pusha	-3[7]
	push	0[7]
	popi
	adjust -1
	ret 7
reall10	
	pusha	-3[6]
	adjust 1
	call	7, l11
	popi
	consti	6
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	54
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	-3[6]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	pusha	-3[6]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	ret 6
reall9	
	push	0[5]
	call	6, l10
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[5]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	consti	5
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	53
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	0[5]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[5]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	pusha	-3[5]
	push	0[5]
	popi
	adjust -1
	ret 5
reall8	
	pusha	-3[4]
	adjust 1
	call	5, l9
	popi
	consti	4
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	52
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	-3[4]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	pusha	-3[4]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	ret 4
reall7	
	push	0[3]
	call	4, l8
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[3]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	consti	3
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	51
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	0[3]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[3]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	pusha	-3[3]
	push	0[3]
	popi
	adjust -1
	ret 3
reall6	
	pusha	-3[2]
	adjust 1
	call	3, l7
	popi
	consti	2
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	50
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	-3[2]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	pusha	-3[2]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	ret 2
reall5	
	push	0[1]
	call	2, l6
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[1]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	consti	1
	alloc	6
	dup
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	115
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	48
	popi
	consti 1
	addi
	dup
	consti	49
	popi
	consti 1
	addi
	dup
	adjust -2
	dup
	dup
	adjust -3
	alloc 6
	dup
	adjust 1
	consti 6
	call 1, mem_copy
	adjust -3
	push	0[1]
	call	1, l0
	dup
	dup
	adjust -3
	alloc 1
	dup
	adjust 1
	popi
	dup
	#thisnode
	pusha	0[1]
	consti 1
	call 1, mem_cplr
	adjust -3
	free
	free
	adjust -1
	pusha	-3[1]
	push	0[1]
	popi
	adjust -1
	ret 1
realmain	
	#root
	pusha	0[0]
	adjust 1
	call	1, l5
	popi
	push	0[0]
	call	1, l1
	adjust -1
	stop
