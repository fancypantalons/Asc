        goto main

################### standard library functions for pal13 ##################
#
# functions currently implemented are:
#
# read_s
# write_s
# mem_copy
# strcmp
#

########################## read family functions ##########################

#
# void read_s(string, size) 
#
# takes a pointer to a string and reads size characters into that string.
#

read_s

read_l
          push -3[1]
          consti 0
          eqi
          ifnz read_e                   # if no bytes left, done.

          push -4[1]
          dup
          readc                         # read character
          popi                          # put character in string.

          consti 1
          addi
          pop -4[1]                     # addy = addy + 1

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto read_l

read_e
          ret 1
                              
########################## write family functions #########################
                                        
#
# void write_s(string, size)
#
# takes a pointer to a string and prints size characters from
# that string.
#

write_s

write_l

          push -3[1]
          consti 0
          eqi
          ifnz write_e                  # if there are no bytes left, done.

          push -4[1]                    # push the string address on.
          dup
          pushi                         # push a character from the string.
          writec                        # write the character out.

          consti 1
          addi
          pop -4[1]                     # increase string pointer

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto write_l

write_e

          ret 1

############################## misc functions #############################
          
#
# void mem_copy(dest, source, size)
#
# copies size bytes from dest to source.  dest and source must
# be passed as pointers.
#
# locals:
#   int count

mem_copy
          push -4[1]
          push -5[1]

mem_loop

          push -3[1]                    # stick size on stack
          consti 0                      # and zero
          eqi                           # size == 0?
          ifnz mem_done                 # we're done...

          push 1[1]                     # push target address on stack
          dup

          push 0[1]                     # push source address on stack
          pushi                         # get byte
          popi                          # store byte
          
          consti 1                      # stick 1 on stack
          addi                          # increment target address
          pop 1[1]                      # store new target address

          push 0[1]                     # push source addy
          consti 1
          addi                          # increment source addy by 1
          pop 0[1]

          push -3[1]                    # push size on stack
          consti 1
          subi                          # decrement size by one
          pop -3[1]

          goto mem_loop

mem_done
          adjust -2
          ret 1

#
# void mem_cplr(source, dest, size)
#
# copies size bytes from dest to source.  dest and source must
# be passed as pointers.
#
# locals:
#   int count

mem_cplr
          push -5[1]
          push -4[1]

mem_lplr
          push -3[1]                    # stick size on stack
          consti 0                      # and zero
          eqi                           # size == 0?
          ifnz mem_done                 # we're done...

          push 1[1]                     # push target address on stack
          dup

          push 0[1]                     # push source address on stack
          pushi                         # get byte
          popi                          # store byte
          
          consti 1                      # stick 1 on stack
          addi                          # increment target address
          pop 1[1]                      # store new target address

          push 0[1]                     # push source addy
          consti 1
          addi                          # increment source addy by 1
          pop 0[1]

          push -3[1]                    # push size on stack
          consti 1
          subi                          # decrement size by one
          pop -3[1]

          goto mem_loop

mem_dnlr

          adjust -2
          ret 1

#
# int strcmp(string1, string2, size)
#
# compares two strings of the same size.  returns 0 if they are the
# same, < 0 if string1 < string2, and > 0 if string1 > string2.         
# 

strcmp
          
strcmp_l
          push -3[1]
          consti 0
          eqi
          ifnz str_eq                   # are we at the end of the strings? must be equal.

          push -5[1]
          pushi                         # shove char1 on stack
          
          push -4[1]                    
          pushi                         # and char2 on stack

          subi                          # get the difference
          dup                           # need the copy for comparison.
          pop -6[1]                     # might as well set the ret value now.
          consti 0
          eqi                           # is the difference == 0?
          ifz strcmp_e                  # if not, return the difference
          
          push -5[1]
          consti 1
          addi
          pop -5[1]                     # string1 += 1

          push -4[1]
          consti 1
          addi
          pop -4[1]                     # string2 += 1

          push -3[1]
          consti 1
          subi
          pop -3[1]                     # size = size - 1

          goto strcmp_l
          
str_eq
          consti 0
          pop -6[1]                     # return zero.

strcmp_e
          ret 1

run_err
	alloc	25
	dup
	dup
	consti	82
	popi
	consti 1
	addi
	dup
	consti	117
	popi
	consti 1
	addi
	dup
	consti	110
	popi
	consti 1
	addi
	dup
	consti	45
	popi
	consti 1
	addi
	dup
	consti	116
	popi
	consti 1
	addi
	dup
	consti	105
	popi
	consti 1
	addi
	dup
	consti	109
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	69
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	111
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	32
	popi
	consti 1
	addi
	dup
	consti	79
	popi
	consti 1
	addi
	dup
	consti	99
	popi
	consti 1
	addi
	dup
	consti	99
	popi
	consti 1
	addi
	dup
	consti	117
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	114
	popi
	consti 1
	addi
	dup
	consti	101
	popi
	consti 1
	addi
	dup
	consti	100
	popi
	consti 1
	addi
	dup
	consti	33
	popi
	consti 1
	addi
	dup
	consti 10
	popi
	consti 1
	addi
	dup
	adjust -2
	consti	24
	call 1, write_s
	adjust -2
        stop
main	
	#var what
	adjust 1
	#var who
	adjust 1
	#var news
	adjust 10
	#var stringlist
	adjust 1
	goto realmain
l0	
	#var buf
	adjust 1
	#var charlie
	adjust 1
	goto reall0
reall0	
	#charlie
	pusha	1[1]
	consti	1
	popi
	push	0[1]
	adjust -1
	#buf
	pusha	0[1]
	readc
	popi
	#while start
l1	
	push	0[1]
	consti	10
	eqi
	not
	push	1[1]
	consti	10
	gti
	not
	and
	#while stat
	ifz l2
	#do stat
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	10
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	push	0[1]
	popi
	push	0[1]
	adjust -1
	#buf
	pusha	0[1]
	readc
	popi
	#charlie
	pusha	1[1]
	push	1[1]
	consti	1
	addi
	popi
	goto l1
l2	
	pusha	-4[1]
	push	1[1]
	consti	1
	subi
	popi
	#while start
l3	
	push	1[1]
	consti	10
	gti
	not
	#while stat
	ifz l4
	#do stat
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	10
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	consti	0
	popi
	#charlie
	pusha	1[1]
	push	1[1]
	consti	1
	addi
	popi
	goto l3
l4	
	adjust -2
	ret 1
l5	
	#var j
	adjust 1
	#var i
	adjust 1
	#var c
	adjust 1
	goto reall5
reall5	
	#c
	pusha	2[1]
	consti	0
	popi
	#i
	pusha	1[1]
	consti	1
	popi
	#while start
l6	
	push	1[1]
	consti	30
	gti
	not
	#while stat
	ifz l7
	#do stat
	#j
	pusha	0[1]
	consti	1
	popi
	#while start
l8	
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	push	0[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	10
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	pushi
	push	2[1]
	eqi
	not
	push	0[1]
	consti	10
	gti
	not
	and
	#while stat
	ifz l9
	#do stat
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	push	0[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	10
	gti
	ifnz	run_err
	consti	1
	subi
	consti	1
	muli
	addi
	pushi
	writec
	#j
	pusha	0[1]
	push	0[1]
	consti	1
	addi
	popi
	goto l8
l9	
	#i
	pusha	1[1]
	push	1[1]
	consti	1
	addi
	popi
	consti	10
	writec
	goto l6
l7	
	adjust -3
	ret 1
l10	
	#var temp
	adjust 10
	goto reall10
reall10	
	push	-3[1]
	push	-4[1]
	eqi
	not
	#if expr
	ifz l11
	#temp
	pusha	0[1]
	push	-5[1]
	push	-3[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	#memcopy
	consti 10
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	push	-5[1]
	push	-3[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	push	-5[1]
	push	-4[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	#memcopy
	consti 10
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	push	-5[1]
	push	-4[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	pusha	0[1]
	#memcopy
	consti 10
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	# if_part then stat
l11	
	adjust -10
	ret 1
l13	
	#var lasts
	adjust 1
	#var firstunknown
	adjust 1
	#var p
	adjust 1
	#var pivot
	adjust 10
	goto reall13
reall13	
	#p
	pusha	2[1]
	push	-4[1]
	push	-5[1]
	addi
	consti	2
	divi
	consti	1
	addi
	popi
	push	-3[1]
	push	-4[1]
	push	2[1]
	call	1, l10
	adjust -1
	adjust -1
	adjust -1
	#pivot
	pusha	3[1]
	push	-3[1]
	push	-4[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	#memcopy
	consti 10
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	#firstunknown
	pusha	1[1]
	push	-4[1]
	consti	1
	addi
	popi
	#lasts
	pusha	0[1]
	push	-4[1]
	popi
	#while start
l14	
	push	1[1]
	push	-5[1]
	gti
	not
	#while stat
	ifz l15
	#do stat
	push	-3[1]
	push	1[1]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	pusha	3[1]
	dup
	adjust -2
	dup
	adjust 1
	consti 10
	call 1, strcmp
	adjust -3
	consti 0
	gti
	not
	#if expr
	ifz l16
	#lasts
	pusha	0[1]
	push	0[1]
	consti	1
	addi
	popi
	push	-3[1]
	push	0[1]
	push	1[1]
	call	1, l10
	adjust -1
	adjust -1
	adjust -1
	# if_part then stat
l16	
	#firstunknown
	pusha	1[1]
	push	1[1]
	consti	1
	addi
	popi
	goto l14
l15	
	push	-3[1]
	push	0[1]
	push	-4[1]
	call	1, l10
	adjust -1
	adjust -1
	adjust -1
	pusha	-6[1]
	push	0[1]
	popi
	adjust -13
	ret 1
l18	
	#var pivotidx
	adjust 1
	goto reall18
reall18	
	push	-4[1]
	push	-5[1]
	lti
	#if expr
	ifz l19
	#pivotidx
	pusha	0[1]
	adjust 1
	push	-5[1]
	push	-4[1]
	push	-3[1]
	call	1, l13
	adjust -1
	adjust -1
	adjust -1
	popi
	push	0[1]
	consti	1
	subi
	push	-4[1]
	push	-3[1]
	call	1, l18
	adjust -1
	adjust -1
	adjust -1
	push	-5[1]
	push	0[1]
	push	-3[1]
	call	1, l18
	adjust -1
	adjust -1
	adjust -1
	# if_part then stat
l19	
	adjust -1
	ret 1
realmain	
	alloc	300
	pop	12[0]
	#what
	pusha	0[0]
	consti	1
	popi
	#while start
l21	
	push	0[0]
	consti	30
	gti
	not
	#while stat
	ifz l22
	#do stat
	#who
	pusha	1[0]
	adjust 1
	pusha	2[0]
	dup
	dup
	adjust -3
	alloc 10
	dup
	adjust 1
	consti 10
	call 1, mem_copy
	adjust -3
	call	1, l0
	dup
	#news
	pusha	2[0]
	consti 10
	call 1, mem_cplr
	adjust -3
	free
	popi
	push	12[0]
	push	0[0]
	dup
	consti	1
	lti
	ifnz	run_err
	dup
	consti	30
	gti
	ifnz	run_err
	consti	1
	subi
	consti	10
	muli
	addi
	pusha	2[0]
	#memcopy
	consti 10
	call 1, mem_copy
	adjust -1
	adjust -1
	adjust -1
	#what
	pusha	0[0]
	push	0[0]
	consti	1
	addi
	popi
	goto l21
l22	
	consti	30
	consti	1
	push	12[0]
	call	1, l18
	adjust -1
	adjust -1
	adjust -1
	push	12[0]
	call	1, l5
	adjust -1
	push	12[0]
	free
	stop
