#
# CMPUT 415, Assignment #2
# Brett Kosinski, 0384423
#
# A slow, stupid implementation of factorial() in ASC assembler.
#
# This program is an attempt to translate a C program into ASC assembler.
# Now, because of this, the code is modeled after the C conventions,
# meaning that we have a main() function which we call, and control
# continues from there.
          
######################### Program Entry Point ########################

          call 0, main                  # Call main()...
          stop                          # ...and then terminate

################################ main ################################

#
# void main()
#
# Local variables:
#   int n
#
# The code in main reads an integer from input and calls factorial(n).
# It then prints the return value.  Input is restricted to 1 < n <= 10.
#
          
main
          adjust 1                      # Allocate storage for local var 'n'

          readi                         # Read an int and put it on the stack
          pop 0[0]                      # Now store the value in 'n'

          consti 1
          push 0[0]                     # Put 'n' onto the stack
          gti                           # Is n < 1?

          ifnz input_error              # If it is, we have an error

          consti 10                      
          push 0[0]                     # 'n' on the stack again...
          gti                           # Is n < 10?
          not                           # Err... make that n >= 10? :)

          ifnz input_error              # If so, error time!

          # Now we set up the call to factorial()

          adjust 1                      # Allocate space for retval
          push 0[0]                     # Stick 'n' on as a parameter.

          call 0, factorial             # Make our call.

          adjust -1                     # Now, remove parameter from stack.

          # Finally, print out the answer... remember, the result is still
          # on the stack.  Oh, and BTW, printing strings SUCKS!

          # "answer is "
          
          consti 32
          consti 115
          consti 105
          consti 32
          consti 114
          consti 101
          consti 119
          consti 115
          consti 110
          consti 97
          
          writec
          writec
          writec
          writec
          writec
          writec
          writec
          writec
          writec
          writec
          
          writei                        # Print the result number

          consti 10                     # And newline
          writec

          goto main_ret                 # And then jump to the end of main()

input_error
          # Code to print out a simple error message.
          # "error\n"

          consti 10
          consti 114
          consti 111
          consti 114
          consti 114
          consti 101

          writec
          writec
          writec
          writec
          writec
          writec

main_ret
          # Code to return from main()...

          adjust -1                     # Clear off local variable 'n'
          ret 0                         # Return from 'main'

############################### factorial ############################

#
# int factorial(int n)
#
# No local variables.
#
# Returns n!.
#

factorial
          # Check if we're at our base case first...

          push -3[0]                    # Stick 'n' on the stack
          consti 1                      
          eqi                           # Does n = 1?
          ifnz fact_term                # Base case, treat specially...

          # If we're not in the base case, call factorial like so:
          #   factorial(n - 1)

          adjust 1                      # Allocate space for retval
          push -3[0]                    # Push 'n' on the stack
          consti 1                      # Calculate n - 1
          subi                          # Now n - 1 is on the stack.

          call 0, factorial             # Call factorial(n - 1)
          adjust -1                     # Now yank parameter off the stack

          # Now we set up to return n * factorial(n - 1)...
          # Remember, the result from factorial(n - 1) is still on
          # the stack.

          push -3[0]                    # Push 'n' back on
          muli                          # n * factorial(n - 1)
          pop -4[0]                     # Pop result into our retval
          
          goto fact_end

fact_term          
          # If we got here, we're in our base case, so just return 'n'        

          push -3[0]                    # Shove 'n' on the stack...
          pop -4[0]                     # ... and pop it into retval.

fact_end
          ret 0          
